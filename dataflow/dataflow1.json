{
	"name": "dataflow1",
	"properties": {
		"folder": {
			"name": "FIRST"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_STAGING",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_SINK",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string,",
				"          Prop_6 as string,",
				"          Address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:[('*.csv')]) ~> source1",
				"source1 filter(toInteger(year) >=1910 && toInteger(year) <=1915) ~> filter1",
				"filter1 derive(Alladdress = regexReplace(regexReplace(Address,'[\\n]',','), '[\\r]',',')) ~> derivedColumn1",
				"derivedColumn1 derive({address 1} = split(Alladdress, ',')[0],",
				"          {address 2} = split(Alladdress, ',')[1],",
				"          {address 3} = split(Alladdress, ',')[2],",
				"          {address 4} = split(Alladdress, ',')[3]) ~> derivedColumn2",
				"derivedColumn2 aggregate(groupBy(year),",
				"     avgRAting = avg(toInteger(Rating))) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('avgrating.csv')],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}